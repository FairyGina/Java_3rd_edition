1.1 변수(variable)란?
int age; // 변수 타입 + 변수이름
변수의 초기화: 변수 사용 전 처음으로 값을 저장하는 것

1.3. 변수의 명명 규칙
식별자: 프로그래밍에서 사용하는 모든 이름으로 같은 영역 내 구분되어야함
    1. 대소문자가 구분되며 길이에 제한 없음
    2. 예약어를 사용해서는 안 됨
    3. 숫자로 시작해서는 안됨
    4. 특수문자는 _, $만 허용
예약어(키워드, 리져브드 워드): 프로그래밍 언어의 구문에 사용되는 단어로 클래스나 변수 메서드에 이름으로 사용 불가
프로그래머에 권장되는 규칙
    1. 클래스 이름의 첫 글자는 항상 대소문자
    2. 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자
    3. 상수의 이름은 모두 대문자로 여러 단어로 이루어진 경우 _로 구분

2. 변수의 타입
주로 사용하는 값과 종류는 크게 문자와 숫자로 나뉘며 숫자는 정수와 실수로 나누어짐
자료형: 값의 종류에 따라 저장 공간 크기와 저장 형식을 정의한 것
    - 문자형(char)
    - 정수형(byte, short, int, long)
    - 실수형(float, double)
변수 선언 시 저장 값의 특성을 고려해 가장 알맞은 자료형을 변수의 타입으로 선택

기본형과 참조형
자료형은 기본/참조로 나뉨
- 기본형 변수: 실제 값을 저장(8개)
               - 논리형(boolean)
               - 문자형(char)
               - 정수형(byte, short, int, long)
               - 실수형(float, double)
- 참조형 변수: 어떤 값이 저장되어 있는 주소를 값으로 객체의 주소값을 저장하며 기본형 변수 타입의 나머지 타입입
* 자바는 C언어같이 참조형 변수 간 연산 불가로 실제 연산에 사용되는 것은 모두 기본형 변수
참조형 변수 선언 시 변수 타입으로 클래스의 이름을 사용해 클래스의 이름이 참조 변수의 타입이 됨 -> 새로운 클래스를 작성하는 건 세로운 참조형 추가
참조 변수 선언 방법: 클래스 이름 변수 이름(Date today = new Date(); -< 참조변수는 null 혹은 객체 주소 값을 가짐 / 초기화 방법법)
객체 생성 연산자 new 결과는 생성된 객체의 주소로 대입연산자(=)에 의해 참조변수 today에 저장. 참조변수 today를 통해 생성된 객체 사용 가능
지료형(data type)과 타입(type) 차이: 기본형은 저장 값 종류에 따라 구분돼 자료형으로 사용하고 참조형은 객체 종류에 따라 구분돼 타입으로 사용

2.1. 기본형
    - 논리형(boolean(1))
    - 문자형(char(2))
    - 정수형(byte(1), short(2), int(4), long(8))
    - 실수형(float(4), double(8))
    * 문자형 char은 문자 내부적으로 정수(유니코드)로 저장해 정수/실수형 연산 가능, boolean 제외 7개 기본형은 서로 연산과 변환 가능

2.2. 상수와 리터널(constant & literal)
상수(constant): 값을 지정하면 다른 값으로 변경 불가 변수로 선언과 동시에 반드시 초기화(권유유). 싱수 이름은 대문자로 여러 단어 시 _로 구분, 상수는 리터널에 의미있는 이름을 붙여 코드의 이해와 수정을 도움
      선언 방법: 변수 타입 앞에 final 붙이기
리터럴(literal): 프로그래밍 상수 개념은 타 값으로 변경 불가 변수로 기존 상수의 정의로 사용
* 변수(variable): 하나의 값을 저장하기 위한 공간
리터럴 타입 & 접미사
  종류   리터럴                         접미사
- 논리형 false, true                    없음
- 정수형 123, 0b0101, 077, 0xFF, 100L   L(l)(long 타입), 없음(int 타입으로 byte, short타입 변수 값 저장 시 사용), 0b(2진수), 0(8진수), 0x(16진수), 리터널중간에 구분자('_') 사용 가능
- 실수형 3.14, 3.0e8, 1.4f, 0x1.Op-1    f(F)(float 타입), d(D)(double 타입): 실수형의 기본 타입으로 생략 가능(접미사 없을 시 기본 타입), 온점(.), e(10의 제곱: 곱수를 나타내려면(예: e3: 10^3)로 표현), p(2의 제곱)
- 문자형 'A', '1', '\n'                 없음(char 타입): 단 하나의 문자만 저장 가능하며 반드시 하나 필요
- 문자열 "ABC", "123", "A". "true"      없음(string 타입): 빈문자열("") 저장 가능, 연산자 new 사용(생략 가능), 덧셈 연산자(+)로 문자열 결합 가능: 모두 숫자면 두 수를 더하고 -> 숫자, 하나가 string이면 나머지를 string으로 변환 후 결합 -> 문자,
                                                          왼쪽 -> 오른쪽으로 연산 수행, 숫자를 문자열로 변환시킬 때 + 빈 문자열("")로 계산 가능
* 타입이 달라도 저장 범위가 넓은 타입에 좁은 타입을 저장시키는 건 가능, 그 이상이면 컴파일 에러 발생

2.3. 형식화된 출력(printf())
같은 값을 다른 형식으로 출력할 때 사용. 
* 지시자(spectifier): 변수의 값을 여러가지 형식으로 변환
* 줄바꿈기능(%n or \n)
지시자  설명
%b      boolean 형식
%d      decimal 정수 형식
%or     octal 정수 형식
%x(%X)  hexa-decimal 정수 형식
%f      floating-point(부동소수점) 형식: 소수점 6자리까지만 출력(마지막 숫자 반올림)
%e(%E)  exponent(지수) 형식
%c      character(문자) 형식
%s      string(문자열) 형식
%g      값을 간략 표현

2.4. 화면에서 입력받기 - Scanner
1. import java.util.*; // Scanner 클래스를 사용하기 위한 문장
2. Scanner scanner = new Scanner(System.in); // Scanner 클래스의 객체 생성
3. String input = scanner.nextLine(); // 입력받은 내용을 input에 저장
int num = Interger.parseInt(input); // 입력받은 내용을 int 타입의 값으로 변환(Interger.parseInt()메소드가 문자열을 int타입의 정수로 변환, float 타입은 Float.parseFloat())
 * int num = scanner.nextInt(); // 정수를 입력받아 변수 num에 저장