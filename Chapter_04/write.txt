ch4 조건문과 반복문
제어문: 프로그램의 흐름을 바꾸는 역할을 하는 문장들
종류: 조건문(조건에 따라 다른 문장이 수행)/반복문(특정 문장들을 반복해 수행)

1. 조건문 if switch
조건문은 조건식과 문장을 포함한 블럭{}으로 구성되며 조건식의 연산결과에 따라 실행 문장이 달라져 프로그램의 실행 흐름 변경
종류: if / switch
* 처리 경우의 수가 많으면 switch문이 더 효율적이나 제약 또한 더 많음

1.1. if문
조건식과 중괄호로 이루어짐
if(조건식){}

블럭{}
블럭은 한 문장 혹은 아무런 문장도 넣지 않아도 실행 가능

1.2. if-else문
else: 조건식 결과가 참이 아닐 경우 거짓 결과로 수행

1.3. if-else if문

1.4. 중첩 if문

1.5. switch문
if문은 조건 결과가 참/거짓으로 경우의 수가 많아질 수록 else-if 추가 -> 조건식이 많아져 복잡해지고 처리시간이 많이 걸림 이를 switch문이 해결 가능
     1. 조건식 계산
     2. 조선식 결과와 일치하는 case문으로 이동
     * 조건 결과와 일치하는 case 문이 없을 경우 default 문으로 이동동
     3. 이후 문장들을 수행
     4. break or switch문이 끝나면 문장 전체를 빠져나감
     * break문은 각 case 문의 영역을 구분하는 역할로, 의도에 따라 고의적으로 생략하는 경우도 존재

switch문의 제약조건
1. switch문의 조건식 결과는 정수 또는 문자열이여만 함
2. case문의 값은 정수 상수만 가능하며, 중복되지 않아야 함

Math.random(): 0.0~1.0사이(1.0은 반환X)의 범위의 double 값을 반환

switch문의 중첩: break문 조심

2. 반복문 for while do while
2.1. for문
반복 횟수를 알 때 적합하며, 구조가 복잡하고 직관적인 문장

for문의 구조와 수행 순서
for(초기화(1);조건식(2);증감식(4)){수행문장(3)}
초기화: 반복문에 사용할 변수를 초기화하는 부분으로 처음 한번만 수행. 둘 이상 변수사용 시 ,를 구분자로 변수 초기화
조건식: 조건 값이 참이면 반복을 수행, 거짓이면 반복 중단 후 for문을 벗어남
증감식: 반복문을 제어하는 변수의 값 증가 혹은 감소

중펍 for문
중첩 횟수는 제한이 없음

향상된 for문(enhanced for statement)
for(타입 변수명 : 배열 or 컬렉션){}

2.2. while문: 조건이 참인 동안 블럭 내 문장 반복
while(조건식){}

for문과 while문의 비교
둘은 항상 서로 변환이 가능. for문이 더 간결하고 알아보기 쉬우나 초기화나 증감식이 필요하지 않는 겨웅 while문이 더 적합

while문의 조건식은 생략 불가

2.3. do-while문
최소 한 번 실행을 보장
do{
}while(조건식);

2.4. break문
주로 if문과 함깨 사용되며 특정 조건 만족 시 자신이 포함된 가장 가까운 반복문을 벗어남. 

2.5. continue문
반복문 내에서만 사용될 수 있으며, 반복 진행 도중 continue문을 만나면 반복문 끝으로 이동해 다음 반복으로 넘어감. for문의 경우 증감식으로 이동, while/do=while문은 조건식으로 이동
전체 반복 중 특정 조건을 만족하는 경우를 제외할 때 유용

2.6. 이름 붙은 반복문
break문은 단 하나의 반복문만 벗어날 수 있기에, 이를 보완하고자 중첩 반복문 앞에 이름을 붙이고 break문과 continue문에 이름을 지정해 하나 이상의 반복문을 벗어나거나 반복을 건너뛸 수 있음음