1.1 자바란?
자바: 썬 마이크로 시스템즈에서 개발해 1996년 1월에 공식적으로 발표한 객체지향 프로그래밍 언어
중요 특징: 운영체제(플랫폼)에 독립적이여서 운영체제 종류에 관계없이 실행 가능
장점: 1. 다양한 기종의 컴퓨터와 운영체제가 공존하는 인터넷 환경에 적합한 언어로써 인터넷의 발전 / 많은 사용자층 확보
      2. c++장점 채택, 덜 사용하는 부분은 제외해 배우기 쉽고 이해가 쉬운 간결한 표현
      3. 풍부한 클래스 라이브러리(Java API)로 프로그래밍에 필요한 요소들을 기본적으로 제공, 클래스 라이브러리 활용 만으로 자바 프로그램 작성 가능
      4. 자바 성능 개선으로 꾸준히 새로운 버전 배포, 모바일, 대규모 기업 환경, XML 등 다양한 최신 기술 지원으로 활동 영역 넓힘

1.2. 자바의 역사
1991년 씬의 엔지니어들에 의해 고안된 오크(oak)라는 언어에서부터 시작
초반엔 가전제품 사용 목적으로 개발, 개발 방향에 따라 이름을 자바로 변경, 핫 자바를 발표, 1996년 1월 자바 정식 버전 발표
보안상 이유로 최신 웹에선 애플릿을 더 이상 지원을 안 하고, 서버 쪽 프로그래밍(서블릿, JSP)가 더 많이 사용.
현재 안드로이드에서 사용으로 소규모 가전제품, 대규모 기업 환경을 위한 개발 분야에 활발히 사용

1.3. 자바언어의 특징
  1. 운영체제에 독립적
     기존 언어는 한 운영체제에 맞게 개발되는 경우가 많았으나 자바는 자바가상머신(JVM)을 통해 자바 응용프로그램은 운영체제나 하드웨어가 아닌 머신을 통해 해당 운영체제에 대해 변환해 통신.
     다만 운영체제에 대해 독립적이나 JVM에 대해선 종속적이라 서로 다른 버전의 머신을 제공
     write once, run anyway
  2. 객체지향언어
     객체지향개념인 상속, 캡슐화, 다형성이 잘 적용된 순수 객체 지향 언어
     - 객채지향 언어: 필요 데이터를 추상화해 상태와 행위를 가진 객체를 만들고 객체들 간 유기적인 상호작용을 통해 로직 구성 프로그래밍 방법
      * 추상화: 컴퓨터 과학에서 추상화는 복잡한 자료, 모듈, 시스템 등으로부터 핵심적인 개념 또는 기능을 간추려 내는 것으로, 구체적인 사물들간의 공통점을 취하고 차이점을 버리는 일반화를 사용하거나 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것
      * 유기적인 상호작용: 다양한 개체 간에 서로 영향을 주고받는 것
     - 상속화: 부모 클래스에 정의된 변수 및 메서드를 자식 클래스에서 상속받아 사용하는 것
     - 캡슐화: 데이터와 코드의 형태를 외부로부터 알 수 없게 하고, 데이터의 구조와 역할, 기능을 하나의 캡슐 형태로 만드는 방법(정보 은닉: private)
     - 다형화: 다양한 형태로 표현이 가능한 구조(overloading, overriding)
     - 객체지향 프로그래밍(Object Oriented Programming, OOP)
      * OOP의 5가지 원칙
        - 단일 책임 원칙 (SRP : Single Responsibility Principle): 한 클래스는 하나의 책임만 가져야 한다.
        - 개방 폐쇄 원칙 (OCP : Open/Closed Principle): 확장에는 열려(Open) 있으나, 변경에는 닫혀(Closed)있어야 한다.
        - 리스코프 치환 원칙 (LSP : Liskov’s Substitution Principle): 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
        - 인터페이스 분리 원칙 (ISP : Interface Segregation Principle): 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
        - 의존관계 역전 원칙 (DIP : Dependency Inversion Principle): 추상화에 의존한다. 구체화에 의존하면 안된다. 
  3. 배우기 쉬움
     자바의 연산자와 기본 구문은 C++, 객체지향관련 구문은 스몰톡 언어를 기반으로 객체지향 개념 이해가 활용하기 쉬워 저변확대에 기여
  4. 자동 메모리 관리(garbage collection)
     자바 프로그램 실행시, 가비지 콜렉터가 자동으로 메모리 관리 -> 프로그래머의 메모리 관리(사용하지 않는 메모리 체크 및 반환 관리) 불필요
  5. 네트워크와 분산처리 지원
     인터넷과 대규모 분산환경을 염두해 다양한 네트워크 프로그래밍 라이브러리(Java API)로 네트워크 관련 프로그램 개발 지원
  6. 멀티쓰레드 지원
     자바에서 개발된 멀티쓰레드 프로그램은 시스템과 관계없이 구현 가능하며, 관련 라이브러리(Java API) 제공으로 구현 용이. 여러 쓰레드에 대한 스케쥴링을 자바 인터프리터가 담당
     * 스케쥴링: 자원을 사용하는 순서를 결정짓는 작업  
     - 쓰레드(Thread): CPU 수행의 기본 단위 또는 프로세스 안의 제어권의 흐름으로 Thread ID, Program counter, Register set, Stack space로 구성
     - 멀티스레드: 하나의 프로세스를 다수의 실행 단위로 구분하여 자원을 공유하고 자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상시키는 것으로 하나의 프로그램에 동시에 여러 개의 일을 수행할수 있도록 해주는 것
     - 멀티스레딩 장점
       - 응답성(Responsiveness): 싱글 스레드인 경우, 작업이 끝나기 전까지 사용자에게 응답하지 않는다. 반면 멀티스레드인 경우 작업을 분리해서 수행하므로 실시간으로 사용자에게 응답 가능
       - 자원 공유(Resource sharing): 프로세스는 오직 공유 메모리나 메시지 패싱을 이용해서 자원을 공유할 수 있지만, 스레드는 자신이 속한 프로세스 내의 스레드들과 메모리나 자원을 공유하여 효율적으로 사용 가능
       - 경제성(Economy): 프로세스를 새로 생성하는 비용보다 스레드를 새로 생성하는 게 훨씬 싸며, Context switching의 오버헤드 또한 스레드가 더 경제적이다. 실제로 Solaris에서 프로세스 생성은 스레드 생성보다 30배 느리고, switching은 5배 느림림
                          * 컨텍스트 스위칭: CPU/코어에서 실행 중이던 프로세스/스레드가 다른 프로세스/스레드로 교체되는 것
       - 확장성(Scalability): 싱글 스레드인 경우 한 프로세스는 오직 한 프로세서에서만 수행 가능하다. 반면 멀티 스레드인 경우 한 프로세스를 여러 프로세서에서 수행할 수 있으므로 훨씬 효율적
  7. 동적 로딩(Dynamic Loading) 지원
     자바로 작성된 앱은 여러 개의 클래스로 구성되어 있는데, 자바는 동적 로딩을 지원해 실행 시 모든 클래스가 로딩되지 않고 필요 시점에 클래스를 로딩해 사용 가능
     일부 클래스가 변경돼도 전체 애플리케이션을 다시 컴파일하지 않아도 되며, 앱의 변경사항 발생 시 비교적 적은 작업으로 처리 가능한 유연한 앱 작성 가능
     * 동적 로딩: 프로세스가 시작될 때 그 프로세스와 주소 공간 전체를 메모리에 올려놓는 것이 아닌, 메모리를 좀 더 효율적으로 사용하기 위해 필요한 루틴이 호출될 때 해당 루틴을 메모리에 적재하는 방식
  단점: 속도가 느림. 다만 바이트코드를 하드웨어 기계어로 바로 변환하는 JIT 컴파일러와 핫스팟같은 신기술 도입으로 JVM 기능이 향상돼 속도 문제를 어느정도 개선

1.4. JVM(Java Virtual Machine)
자바를 실행하기 위한 가상 기계
* 가상 기계: 소프트웨어로 구현된 하드웨어(예: 윈도우 미디어 플레이어, 윈앰프)
자바 앱이 실행되긴 위해서는 반드시 JVM이 필요 <- JVM을 거치고 하드웨어에 맞게 완전 컴파일이 아닌 실행 시에 해석해 속도가 느림
JVM은 OS에 종속적, JVM은 OS와 하드웨어에 독립적 

3.2. 자주 발생하는 에러와 해결방법
1. cannot find symbol / cannot resolve symbol
   저장된 변수나 메소드를 찾을 수 없다
2. ';'
   세미클론이 필요한 곳에 없는 것
3. Exception in thread "main" java.lang.NoSuchMethodError: main
   main 메소드 찾기 불가로 메인 선언에 오타확인
4. Exception in thread "main" java.lang.NoClassDefFoundError: Hello
   Hello란 클래스 명을 찾을 수 없는 것으로 클래스 확인
5. illegal start of expression
   문장의 앞부분이 문법에 맞지 않는 것으로 if/for 문이나 괄호 여닫이 등의 문법 오류
6. class. Interface, or enum expected
   키워드가 없다는 것으로 괄호 갯수가 틀릴 경우 발생

3.3 자바프로그램 실행과정
C:/jdk1.8/work>java Hello
1. 프로그램의 실행에 필요한 클래스 로드
2. 클래스 파일 검사
3. 지정된 클래스에서 main 호출
main의 첫줄부터 코드 실행, 마지막 코드까지 모두 실행 시프로그램 종료, 사용한 자원들은 모두 반환